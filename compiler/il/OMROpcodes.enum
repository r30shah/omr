/*******************************************************************************
 * Copyright (c) 2020, 2021 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at http://eclipse.org/legal/epl-2.0
 * or the Apache License, Version 2.0 which accompanies this distribution
 * and is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License, v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception [1] and GNU General Public
 * License, version 2 with the OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

OPCODE_MACRO(\
   /* .opcode               = */ aconst, \
   /* .name                 = */ "aconst", \
   /* .properties1          = */ ILProp1::LoadConst, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load address constant (zero value means NULL) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iconst, \
   /* .name                 = */ "iconst", \
   /* .properties1          = */ ILProp1::LoadConst, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load integer constant (32-bit signed 2's complement) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lconst, \
   /* .name                 = */ "lconst", \
   /* .properties1          = */ ILProp1::LoadConst, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load long integer constant (64-bit signed 2's complement) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fconst, \
   /* .name                 = */ "fconst", \
   /* .properties1          = */ ILProp1::LoadConst, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load float constant (32-bit ieee fp) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dconst, \
   /* .name                 = */ "dconst", \
   /* .properties1          = */ ILProp1::LoadConst, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load double constant (64-bit ieee fp) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bconst, \
   /* .name                 = */ "bconst", \
   /* .properties1          = */ ILProp1::LoadConst, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load byte integer constant (8-bit signed 2's complement) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sconst, \
   /* .name                 = */ "sconst", \
   /* .properties1          = */ ILProp1::LoadConst, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load short integer constant (16-bit signed 2's complement) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iload, \
   /* .name                 = */ "iload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fload, \
   /* .name                 = */ "fload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dload, \
   /* .name                 = */ "dload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ aload, \
   /* .name                 = */ "aload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bload, \
   /* .name                 = */ "bload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sload, \
   /* .name                 = */ "sload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lload, \
   /* .name                 = */ "lload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ irdbar, \
   /* .name                 = */ "irdbar", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ frdbar, \
   /* .name                 = */ "frdbar", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ drdbar, \
   /* .name                 = */ "drdbar", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ardbar, \
   /* .name                 = */ "ardbar", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ brdbar, \
   /* .name                 = */ "brdbar", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ srdbar, \
   /* .name                 = */ "srdbar", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lrdbar, \
   /* .name                 = */ "lrdbar", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iloadi, \
   /* .name                 = */ "iloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load indirect integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ floadi, \
   /* .name                 = */ "floadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load indirect float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dloadi, \
   /* .name                 = */ "dloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load indirect double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ aloadi, \
   /* .name                 = */ "aloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load indirect address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bloadi, \
   /* .name                 = */ "bloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load indirect byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sloadi, \
   /* .name                 = */ "sloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load indirect short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lloadi, \
   /* .name                 = */ "lloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load indirect long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ irdbari, \
   /* .name                 = */ "irdbari", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load indirect integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ frdbari, \
   /* .name                 = */ "frdbari", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load indirect float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ drdbari, \
   /* .name                 = */ "drdbari", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load indirect double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ardbari, \
   /* .name                 = */ "ardbari", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load indirect address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ brdbari, \
   /* .name                 = */ "brdbari", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load indirect byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ srdbari, \
   /* .name                 = */ "srdbari", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load indirect short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lrdbari, \
   /* .name                 = */ "lrdbari", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::ReadBarrierLoad, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    read barrier for load indirect long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ istore, \
   /* .name                 = */ "istore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lstore, \
   /* .name                 = */ "lstore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fstore, \
   /* .name                 = */ "fstore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dstore, \
   /* .name                 = */ "dstore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ astore, \
   /* .name                 = */ "astore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bstore, \
   /* .name                 = */ "bstore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sstore, \
   /* .name                 = */ "sstore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iwrtbar, \
   /* .name                 = */ "iwrtbar", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int32, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store direct integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lwrtbar, \
   /* .name                 = */ "lwrtbar", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int64, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store direct long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fwrtbar, \
   /* .name                 = */ "fwrtbar", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_CHILD(TR::Float, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store direct float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dwrtbar, \
   /* .name                 = */ "dwrtbar", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_CHILD(TR::Double, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store direct double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ awrtbar, \
   /* .name                 = */ "awrtbar", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store direct address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bwrtbar, \
   /* .name                 = */ "bwrtbar", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int8, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store direct byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ swrtbar, \
   /* .name                 = */ "swrtbar", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int16, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store direct short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lstorei, \
   /* .name                 = */ "lstorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store indirect long integer           (child1 a, child2 l) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fstorei, \
   /* .name                 = */ "fstorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store indirect float                  (child1 a, child2 f) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dstorei, \
   /* .name                 = */ "dstorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store indirect double                 (child1 a, child2 d) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ astorei, \
   /* .name                 = */ "astorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store indirect address                (child1 a dest, child2 a value) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bstorei, \
   /* .name                 = */ "bstorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store indirect byte                   (child1 a, child2 b) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sstorei, \
   /* .name                 = */ "sstorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store indirect short integer          (child1 a, child2 s) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ istorei, \
   /* .name                 = */ "istorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store indirect integer                (child1 a, child2 i) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lwrtbari, \
   /* .name                 = */ "lwrtbari", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Address, TR::Int64, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store indirect long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fwrtbari, \
   /* .name                 = */ "fwrtbari", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ THREE_CHILD(TR::Address, TR::Float, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store indirect float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dwrtbari, \
   /* .name                 = */ "dwrtbari", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ THREE_CHILD(TR::Address, TR::Double, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store indirect double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ awrtbari, \
   /* .name                 = */ "awrtbari", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ THREE_CHILD(TR::Address, TR::Address, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store indirect address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bwrtbari, \
   /* .name                 = */ "bwrtbari", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Address, TR::Int8, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store indirect byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ swrtbari, \
   /* .name                 = */ "swrtbari", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Address, TR::Int16, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store indirect short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iwrtbari, \
   /* .name                 = */ "iwrtbari", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::WriteBarrierStore| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Address, TR::Int32, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    write barrier for store indirect integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ Goto, \
   /* .name                 = */ "goto", \
   /* .properties1          = */ ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    goto label address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ireturn, \
   /* .name                 = */ "ireturn", \
   /* .properties1          = */ ILProp1::Return | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    return an integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lreturn, \
   /* .name                 = */ "lreturn", \
   /* .properties1          = */ ILProp1::Return | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    return a long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ freturn, \
   /* .name                 = */ "freturn", \
   /* .properties1          = */ ILProp1::Return | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    return a float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dreturn, \
   /* .name                 = */ "dreturn", \
   /* .properties1          = */ ILProp1::Return | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    return a double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ areturn, \
   /* .name                 = */ "areturn", \
   /* .properties1          = */ ILProp1::Return | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    return an address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ Return, \
   /* .name                 = */ "return", \
   /* .properties1          = */ ILProp1::Return | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    void return */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ asynccheck, \
   /* .name                 = */ "asynccheck", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::MustBeLowered| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    GC point */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ athrow, \
   /* .name                 = */ "athrow", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::MustBeLowered | ILProp2::CanRaiseException| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    throw an exception */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ icall, \
   /* .name                 = */ "icall", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    direct call returning integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lcall, \
   /* .name                 = */ "lcall", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    direct call returning long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcall, \
   /* .name                 = */ "fcall", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    direct call returning float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcall, \
   /* .name                 = */ "dcall", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    direct call returning double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ acall, \
   /* .name                 = */ "acall", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    direct call returning reference */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ call, \
   /* .name                 = */ "call", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    direct call returning void */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iadd, \
   /* .name                 = */ "iadd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::iadd, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add 2 integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ladd, \
   /* .name                 = */ "ladd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::ladd, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add 2 long integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fadd, \
   /* .name                 = */ "fadd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fadd, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add 2 floats */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dadd, \
   /* .name                 = */ "dadd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dadd, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add 2 doubles */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ badd, \
   /* .name                 = */ "badd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::badd, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add 2 bytes */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sadd, \
   /* .name                 = */ "sadd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::sadd, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add 2 short integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ isub, \
   /* .name                 = */ "isub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    subtract 2 integers                (child1 - child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lsub, \
   /* .name                 = */ "lsub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    subtract 2 long integers           (child1 - child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fsub, \
   /* .name                 = */ "fsub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    subtract 2 floats                  (child1 - child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dsub, \
   /* .name                 = */ "dsub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    subtract 2 doubles                 (child1 - child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bsub, \
   /* .name                 = */ "bsub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    subtract 2 bytes                   (child1 - child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ssub, \
   /* .name                 = */ "ssub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    subtract 2 short integers          (child1 - child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ asub, \
   /* .name                 = */ "asub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    subtract 2 addresses (child1 - child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ imul, \
   /* .name                 = */ "imul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::imul, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lmul, \
   /* .name                 = */ "lmul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lmul, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 signed or unsigned long integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fmul, \
   /* .name                 = */ "fmul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fmul, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 floats */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dmul, \
   /* .name                 = */ "dmul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dmul, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 doubles */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bmul, \
   /* .name                 = */ "bmul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bmul, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 bytes */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ smul, \
   /* .name                 = */ "smul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::smul, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 short integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ idiv, \
   /* .name                 = */ "idiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    divide 2 integers                (child1 / child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ldiv, \
   /* .name                 = */ "ldiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    divide 2 long integers           (child1 / child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fdiv, \
   /* .name                 = */ "fdiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    divide 2 floats                  (child1 / child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddiv, \
   /* .name                 = */ "ddiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    divide 2 doubles                 (child1 / child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bdiv, \
   /* .name                 = */ "bdiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    divide 2 bytes                   (child1 / child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sdiv, \
   /* .name                 = */ "sdiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    divide 2 short integers          (child1 / child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iudiv, \
   /* .name                 = */ "iudiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    divide 2 unsigned integers       (child1 / child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ludiv, \
   /* .name                 = */ "ludiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    divide 2 unsigned long integers  (child1 / child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ irem, \
   /* .name                 = */ "irem", \
   /* .properties1          = */ ILProp1::Rem, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    remainder of 2 integers                (child1 % child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lrem, \
   /* .name                 = */ "lrem", \
   /* .properties1          = */ ILProp1::Rem, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    remainder of 2 long integers           (child1 % child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ frem, \
   /* .name                 = */ "frem", \
   /* .properties1          = */ ILProp1::Rem, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    remainder of 2 floats                  (child1 % child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ drem, \
   /* .name                 = */ "drem", \
   /* .properties1          = */ ILProp1::Rem, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    remainder of 2 doubles                 (child1 % child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ brem, \
   /* .name                 = */ "brem", \
   /* .properties1          = */ ILProp1::Rem, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    remainder of 2 bytes                   (child1 % child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ srem, \
   /* .name                 = */ "srem", \
   /* .properties1          = */ ILProp1::Rem, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    remainder of 2 short integers          (child1 % child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iurem, \
   /* .name                 = */ "iurem", \
   /* .properties1          = */ ILProp1::Rem, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    remainder of 2 unsigned integers       (child1 % child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ineg, \
   /* .name                 = */ "ineg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    negate an integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lneg, \
   /* .name                 = */ "lneg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    negate a long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fneg, \
   /* .name                 = */ "fneg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    negate a float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dneg, \
   /* .name                 = */ "dneg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    negate a double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bneg, \
   /* .name                 = */ "bneg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    negate a bytes */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sneg, \
   /* .name                 = */ "sneg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    negate a short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iabs, \
   /* .name                 = */ "iabs", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::Abs, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    absolute value of integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ labs, \
   /* .name                 = */ "labs", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::Abs, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    absolute value of long */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fabs, \
   /* .name                 = */ "fabs", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::Abs, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    absolute value of float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dabs, \
   /* .name                 = */ "dabs", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::Abs, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    absolute value of double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ishl, \
   /* .name                 = */ "ishl", \
   /* .properties1          = */ ILProp1::LeftShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift integer left                (child1 << child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lshl, \
   /* .name                 = */ "lshl", \
   /* .properties1          = */ ILProp1::LeftShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int64, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift long integer left           (child1 << child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bshl, \
   /* .name                 = */ "bshl", \
   /* .properties1          = */ ILProp1::LeftShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int8, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift byte left                   (child1 << child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sshl, \
   /* .name                 = */ "sshl", \
   /* .properties1          = */ ILProp1::LeftShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int16, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift short integer left          (child1 << child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ishr, \
   /* .name                 = */ "ishr", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift integer right arithmetically               (child1 >> child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lshr, \
   /* .name                 = */ "lshr", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int64, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift long integer right arithmetically          (child1 >> child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bshr, \
   /* .name                 = */ "bshr", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int8, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift byte right arithmetically                  (child1 >> child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sshr, \
   /* .name                 = */ "sshr", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int16, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift short integer arithmetically               (child1 >> child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iushr, \
   /* .name                 = */ "iushr", \
   /* .properties1          = */ ILProp1::RightShift | ILProp1::ShiftLogical, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift integer right logically                   (child1 >> child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lushr, \
   /* .name                 = */ "lushr", \
   /* .properties1          = */ ILProp1::RightShift | ILProp1::ShiftLogical, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int64, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift long integer right logically              (child1 >> child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bushr, \
   /* .name                 = */ "bushr", \
   /* .properties1          = */ ILProp1::RightShift | ILProp1::ShiftLogical, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int8, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift byte right logically                      (child1 >> child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sushr, \
   /* .name                 = */ "sushr", \
   /* .properties1          = */ ILProp1::RightShift | ILProp1::ShiftLogical, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int16, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift short integer right logically             (child1 >> child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ irol, \
   /* .name                 = */ "irol", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::LeftRotate, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    rotate integer left */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lrol, \
   /* .name                 = */ "lrol", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::LeftRotate, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Int64, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    rotate long integer left */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iand, \
   /* .name                 = */ "iand", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::And, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::iand, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean and of 2 integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ land, \
   /* .name                 = */ "land", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::And, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::land, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean and of 2 long integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ band, \
   /* .name                 = */ "band", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::And, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::band, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean and of 2 bytes */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sand, \
   /* .name                 = */ "sand", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::And, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::sand, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean and of 2 short integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ior, \
   /* .name                 = */ "ior", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Or, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ior, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean or of 2 integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lor, \
   /* .name                 = */ "lor", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Or, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lor, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean or of 2 long integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bor, \
   /* .name                 = */ "bor", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Or, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bor, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean or of 2 bytes */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sor, \
   /* .name                 = */ "sor", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Or, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::sor, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean or of 2 short integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ixor, \
   /* .name                 = */ "ixor", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Xor, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ixor, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean xor of 2 integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lxor, \
   /* .name                 = */ "lxor", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Xor, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lxor, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean xor of 2 long integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bxor, \
   /* .name                 = */ "bxor", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Xor, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bxor, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean xor of 2 bytes */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sxor, \
   /* .name                 = */ "sxor", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Xor, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::sxor, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    boolean xor of 2 short integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ i2l, \
   /* .name                 = */ "i2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::SignExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert integer to long integer with sign extension */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ i2f, \
   /* .name                 = */ "i2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert integer to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ i2d, \
   /* .name                 = */ "i2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert integer to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ i2b, \
   /* .name                 = */ "i2b", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert integer to byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ i2s, \
   /* .name                 = */ "i2s", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert integer to short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ i2a, \
   /* .name                 = */ "i2a", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert integer to address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iu2l, \
   /* .name                 = */ "iu2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::ZeroExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned integer to long integer with zero extension */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iu2f, \
   /* .name                 = */ "iu2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned integer to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iu2d, \
   /* .name                 = */ "iu2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned integer to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iu2a, \
   /* .name                 = */ "iu2a", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned integer to address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ l2i, \
   /* .name                 = */ "l2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert long integer to integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ l2f, \
   /* .name                 = */ "l2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert long integer to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ l2d, \
   /* .name                 = */ "l2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert long integer to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ l2b, \
   /* .name                 = */ "l2b", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert long integer to byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ l2s, \
   /* .name                 = */ "l2s", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert long integer to short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ l2a, \
   /* .name                 = */ "l2a", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert long integer to address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lu2f, \
   /* .name                 = */ "lu2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned long integer to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lu2d, \
   /* .name                 = */ "lu2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned long integer to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lu2a, \
   /* .name                 = */ "lu2a", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned long integer to address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2i, \
   /* .name                 = */ "f2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2l, \
   /* .name                 = */ "f2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2d, \
   /* .name                 = */ "f2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2b, \
   /* .name                 = */ "f2b", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2s, \
   /* .name                 = */ "f2s", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2i, \
   /* .name                 = */ "d2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2l, \
   /* .name                 = */ "d2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2f, \
   /* .name                 = */ "d2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2b, \
   /* .name                 = */ "d2b", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2s, \
   /* .name                 = */ "d2s", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ b2i, \
   /* .name                 = */ "b2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::SignExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to integer with sign extension */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ b2l, \
   /* .name                 = */ "b2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::SignExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to long integer with sign extension */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ b2f, \
   /* .name                 = */ "b2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ b2d, \
   /* .name                 = */ "b2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ b2s, \
   /* .name                 = */ "b2s", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::SignExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to short integer with sign extension */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ b2a, \
   /* .name                 = */ "b2a", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bu2i, \
   /* .name                 = */ "bu2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::ZeroExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to integer with zero extension */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bu2l, \
   /* .name                 = */ "bu2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::ZeroExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to long integer with zero extension */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bu2f, \
   /* .name                 = */ "bu2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned byte to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bu2d, \
   /* .name                 = */ "bu2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned byte to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bu2s, \
   /* .name                 = */ "bu2s", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::ZeroExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to short integer with zero extension */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bu2a, \
   /* .name                 = */ "bu2a", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::ZeroExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned byte to unsigned address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ s2i, \
   /* .name                 = */ "s2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::SignExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert short integer to integer with sign extension */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ s2l, \
   /* .name                 = */ "s2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::SignExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert short integer to long integer with sign extension */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ s2f, \
   /* .name                 = */ "s2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert short integer to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ s2d, \
   /* .name                 = */ "s2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert short integer to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ s2b, \
   /* .name                 = */ "s2b", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert short integer to byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ s2a, \
   /* .name                 = */ "s2a", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert short integer to address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ su2i, \
   /* .name                 = */ "su2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::ZeroExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zero extend short to int */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ su2l, \
   /* .name                 = */ "su2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::ZeroExtension, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zero extend char to long */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ su2f, \
   /* .name                 = */ "su2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert char to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ su2d, \
   /* .name                 = */ "su2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert char to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ su2a, \
   /* .name                 = */ "su2a", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert char to address */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ a2i, \
   /* .name                 = */ "a2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert address to integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ a2l, \
   /* .name                 = */ "a2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert address to long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ a2b, \
   /* .name                 = */ "a2b", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert address to byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ a2s, \
   /* .name                 = */ "a2s", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert address to short */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ icmpeq, \
   /* .name                 = */ "icmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::icmpeq, \
   /* .reverseBranchOpCode  = */ TR::icmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ificmpeq, \
   /* .description          =    integer compare if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ icmpne, \
   /* .name                 = */ "icmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::icmpne, \
   /* .reverseBranchOpCode  = */ TR::icmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ificmpne, \
   /* .description          =    integer compare if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ icmplt, \
   /* .name                 = */ "icmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::icmpgt, \
   /* .reverseBranchOpCode  = */ TR::icmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ificmplt, \
   /* .description          =    integer compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ icmpge, \
   /* .name                 = */ "icmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::icmple, \
   /* .reverseBranchOpCode  = */ TR::icmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ificmpge, \
   /* .description          =    integer compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ icmpgt, \
   /* .name                 = */ "icmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::icmplt, \
   /* .reverseBranchOpCode  = */ TR::icmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ificmpgt, \
   /* .description          =    integer compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ icmple, \
   /* .name                 = */ "icmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::icmpge, \
   /* .reverseBranchOpCode  = */ TR::icmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ificmple, \
   /* .description          =    integer compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iucmplt, \
   /* .name                 = */ "iucmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::iucmpgt, \
   /* .reverseBranchOpCode  = */ TR::iucmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifiucmplt, \
   /* .description          =    unsigned integer compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iucmpge, \
   /* .name                 = */ "iucmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::iucmple, \
   /* .reverseBranchOpCode  = */ TR::iucmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifiucmpge, \
   /* .description          =    unsigned integer compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iucmpgt, \
   /* .name                 = */ "iucmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::iucmplt, \
   /* .reverseBranchOpCode  = */ TR::iucmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifiucmpgt, \
   /* .description          =    unsigned integer compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iucmple, \
   /* .name                 = */ "iucmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::iucmpge, \
   /* .reverseBranchOpCode  = */ TR::iucmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifiucmple, \
   /* .description          =    unsigned integer compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lcmpeq, \
   /* .name                 = */ "lcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lcmpeq, \
   /* .reverseBranchOpCode  = */ TR::lcmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iflcmpeq, \
   /* .description          =    long compare if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lcmpne, \
   /* .name                 = */ "lcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lcmpne, \
   /* .reverseBranchOpCode  = */ TR::lcmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iflcmpne, \
   /* .description          =    long compare if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lcmplt, \
   /* .name                 = */ "lcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lcmpgt, \
   /* .reverseBranchOpCode  = */ TR::lcmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iflcmplt, \
   /* .description          =    long compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lcmpge, \
   /* .name                 = */ "lcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lcmple, \
   /* .reverseBranchOpCode  = */ TR::lcmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iflcmpge, \
   /* .description          =    long compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lcmpgt, \
   /* .name                 = */ "lcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lcmplt, \
   /* .reverseBranchOpCode  = */ TR::lcmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iflcmpgt, \
   /* .description          =    long compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lcmple, \
   /* .name                 = */ "lcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lcmpge, \
   /* .reverseBranchOpCode  = */ TR::lcmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iflcmple, \
   /* .description          =    long compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lucmplt, \
   /* .name                 = */ "lucmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lucmpgt, \
   /* .reverseBranchOpCode  = */ TR::lucmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iflucmplt, \
   /* .description          =    unsigned long compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lucmpge, \
   /* .name                 = */ "lucmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lucmple, \
   /* .reverseBranchOpCode  = */ TR::lucmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iflucmpge, \
   /* .description          =    unsigned long compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lucmpgt, \
   /* .name                 = */ "lucmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lucmplt, \
   /* .reverseBranchOpCode  = */ TR::lucmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iflucmpgt, \
   /* .description          =    unsigned long compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lucmple, \
   /* .name                 = */ "lucmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lucmpge, \
   /* .reverseBranchOpCode  = */ TR::lucmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iflucmple, \
   /* .description          =    unsigned long compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpeq, \
   /* .name                 = */ "fcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmpeq, \
   /* .reverseBranchOpCode  = */ TR::fcmpneu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmpeq, \
   /* .description          =    float compare if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpne, \
   /* .name                 = */ "fcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmpne, \
   /* .reverseBranchOpCode  = */ TR::fcmpequ, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmpne, \
   /* .description          =    float compare if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmplt, \
   /* .name                 = */ "fcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmpgt, \
   /* .reverseBranchOpCode  = */ TR::fcmpgeu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmplt, \
   /* .description          =    float compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpge, \
   /* .name                 = */ "fcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmple, \
   /* .reverseBranchOpCode  = */ TR::fcmpltu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmpge, \
   /* .description          =    float compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpgt, \
   /* .name                 = */ "fcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmplt, \
   /* .reverseBranchOpCode  = */ TR::fcmpleu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmpgt, \
   /* .description          =    float compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmple, \
   /* .name                 = */ "fcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmpge, \
   /* .reverseBranchOpCode  = */ TR::fcmpgtu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmple, \
   /* .description          =    float compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpequ, \
   /* .name                 = */ "fcmpequ", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmpequ, \
   /* .reverseBranchOpCode  = */ TR::fcmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmpequ, \
   /* .description          =    float compare if equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpneu, \
   /* .name                 = */ "fcmpneu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmpneu, \
   /* .reverseBranchOpCode  = */ TR::fcmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmpneu, \
   /* .description          =    float compare if not equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpltu, \
   /* .name                 = */ "fcmpltu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmpgtu, \
   /* .reverseBranchOpCode  = */ TR::fcmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmpltu, \
   /* .description          =    float compare if less than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpgeu, \
   /* .name                 = */ "fcmpgeu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmpleu, \
   /* .reverseBranchOpCode  = */ TR::fcmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmpgeu, \
   /* .description          =    float compare if greater than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpgtu, \
   /* .name                 = */ "fcmpgtu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmpltu, \
   /* .reverseBranchOpCode  = */ TR::fcmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmpgtu, \
   /* .description          =    float compare if greater than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpleu, \
   /* .name                 = */ "fcmpleu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::fcmpgeu, \
   /* .reverseBranchOpCode  = */ TR::fcmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::iffcmpleu, \
   /* .description          =    float compare if less than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpeq, \
   /* .name                 = */ "dcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmpeq, \
   /* .reverseBranchOpCode  = */ TR::dcmpneu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmpeq, \
   /* .description          =    double compare if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpne, \
   /* .name                 = */ "dcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmpne, \
   /* .reverseBranchOpCode  = */ TR::dcmpequ, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmpne, \
   /* .description          =    double compare if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmplt, \
   /* .name                 = */ "dcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmpgt, \
   /* .reverseBranchOpCode  = */ TR::dcmpgeu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmplt, \
   /* .description          =    double compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpge, \
   /* .name                 = */ "dcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmple, \
   /* .reverseBranchOpCode  = */ TR::dcmpltu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmpge, \
   /* .description          =    double compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpgt, \
   /* .name                 = */ "dcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmplt, \
   /* .reverseBranchOpCode  = */ TR::dcmpleu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmpgt, \
   /* .description          =    double compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmple, \
   /* .name                 = */ "dcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmpge, \
   /* .reverseBranchOpCode  = */ TR::dcmpgtu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmple, \
   /* .description          =    double compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpequ, \
   /* .name                 = */ "dcmpequ", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmpequ, \
   /* .reverseBranchOpCode  = */ TR::dcmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmpequ, \
   /* .description          =    double compare if equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpneu, \
   /* .name                 = */ "dcmpneu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmpneu, \
   /* .reverseBranchOpCode  = */ TR::dcmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmpneu, \
   /* .description          =    double compare if not equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpltu, \
   /* .name                 = */ "dcmpltu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmpgtu, \
   /* .reverseBranchOpCode  = */ TR::dcmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmpltu, \
   /* .description          =    double compare if less than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpgeu, \
   /* .name                 = */ "dcmpgeu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmpleu, \
   /* .reverseBranchOpCode  = */ TR::dcmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmpgeu, \
   /* .description          =    double compare if greater than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpgtu, \
   /* .name                 = */ "dcmpgtu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmpltu, \
   /* .reverseBranchOpCode  = */ TR::dcmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmpgtu, \
   /* .description          =    double compare if greater than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpleu, \
   /* .name                 = */ "dcmpleu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::dcmpgeu, \
   /* .reverseBranchOpCode  = */ TR::dcmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdcmpleu, \
   /* .description          =    double compare if less than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ acmpeq, \
   /* .name                 = */ "acmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::acmpeq, \
   /* .reverseBranchOpCode  = */ TR::acmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifacmpeq, \
   /* .description          =    address compare if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ acmpne, \
   /* .name                 = */ "acmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::acmpne, \
   /* .reverseBranchOpCode  = */ TR::acmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifacmpne, \
   /* .description          =    address compare if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ acmplt, \
   /* .name                 = */ "acmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::UnsignedCompare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::acmpgt, \
   /* .reverseBranchOpCode  = */ TR::acmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifacmplt, \
   /* .description          =    address compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ acmpge, \
   /* .name                 = */ "acmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::UnsignedCompare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::acmple, \
   /* .reverseBranchOpCode  = */ TR::acmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifacmpge, \
   /* .description          =    address compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ acmpgt, \
   /* .name                 = */ "acmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::UnsignedCompare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::acmplt, \
   /* .reverseBranchOpCode  = */ TR::acmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifacmpgt, \
   /* .description          =    address compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ acmple, \
   /* .name                 = */ "acmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::UnsignedCompare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::acmpge, \
   /* .reverseBranchOpCode  = */ TR::acmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifacmple, \
   /* .description          =    address compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bcmpeq, \
   /* .name                 = */ "bcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bcmpeq, \
   /* .reverseBranchOpCode  = */ TR::bcmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifbcmpeq, \
   /* .description          =    byte compare if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bcmpne, \
   /* .name                 = */ "bcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bcmpne, \
   /* .reverseBranchOpCode  = */ TR::bcmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifbcmpne, \
   /* .description          =    byte compare if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bcmplt, \
   /* .name                 = */ "bcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bcmpgt, \
   /* .reverseBranchOpCode  = */ TR::bcmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifbcmplt, \
   /* .description          =    byte compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bcmpge, \
   /* .name                 = */ "bcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bcmple, \
   /* .reverseBranchOpCode  = */ TR::bcmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifbcmpge, \
   /* .description          =    byte compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bcmpgt, \
   /* .name                 = */ "bcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bcmplt, \
   /* .reverseBranchOpCode  = */ TR::bcmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifbcmpgt, \
   /* .description          =    byte compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bcmple, \
   /* .name                 = */ "bcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bcmpge, \
   /* .reverseBranchOpCode  = */ TR::bcmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifbcmple, \
   /* .description          =    byte compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bucmplt, \
   /* .name                 = */ "bucmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bucmpgt, \
   /* .reverseBranchOpCode  = */ TR::bucmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifbucmplt, \
   /* .description          =    unsigned byte compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bucmpge, \
   /* .name                 = */ "bucmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bucmple, \
   /* .reverseBranchOpCode  = */ TR::bucmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifbucmpge, \
   /* .description          =    unsigned byte compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bucmpgt, \
   /* .name                 = */ "bucmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bucmplt, \
   /* .reverseBranchOpCode  = */ TR::bucmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifbucmpgt, \
   /* .description          =    unsigned byte compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bucmple, \
   /* .name                 = */ "bucmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::bucmpge, \
   /* .reverseBranchOpCode  = */ TR::bucmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifbucmple, \
   /* .description          =    unsigned byte compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ scmpeq, \
   /* .name                 = */ "scmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::scmpeq, \
   /* .reverseBranchOpCode  = */ TR::scmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifscmpeq, \
   /* .description          =    short integer compare if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ scmpne, \
   /* .name                 = */ "scmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::scmpne, \
   /* .reverseBranchOpCode  = */ TR::scmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifscmpne, \
   /* .description          =    short integer compare if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ scmplt, \
   /* .name                 = */ "scmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::scmpgt, \
   /* .reverseBranchOpCode  = */ TR::scmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifscmplt, \
   /* .description          =    short integer compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ scmpge, \
   /* .name                 = */ "scmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::scmple, \
   /* .reverseBranchOpCode  = */ TR::scmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifscmpge, \
   /* .description          =    short integer compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ scmpgt, \
   /* .name                 = */ "scmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::scmplt, \
   /* .reverseBranchOpCode  = */ TR::scmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifscmpgt, \
   /* .description          =    short integer compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ scmple, \
   /* .name                 = */ "scmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::scmpge, \
   /* .reverseBranchOpCode  = */ TR::scmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifscmple, \
   /* .description          =    short integer compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sucmplt, \
   /* .name                 = */ "sucmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::sucmpgt, \
   /* .reverseBranchOpCode  = */ TR::sucmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifsucmplt, \
   /* .description          =    char compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sucmpge, \
   /* .name                 = */ "sucmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::sucmple, \
   /* .reverseBranchOpCode  = */ TR::sucmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifsucmpge, \
   /* .description          =    char compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sucmpgt, \
   /* .name                 = */ "sucmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::sucmplt, \
   /* .reverseBranchOpCode  = */ TR::sucmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifsucmpgt, \
   /* .description          =    char compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sucmple, \
   /* .name                 = */ "sucmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::sucmpge, \
   /* .reverseBranchOpCode  = */ TR::sucmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifsucmple, \
   /* .description          =    char compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lcmp, \
   /* .name                 = */ "lcmp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::CondCodeComputation, \
   /* .properties3          = */ ILProp3::Signum, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    long compare (1 if child1 > child2, 0 if child1 == child2, -1 if child1 < child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpl, \
   /* .name                 = */ "fcmpl", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare l (1 if child1 > child2, 0 if child1 == child2, -1 if child1 < child2 or unordered) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcmpg, \
   /* .name                 = */ "fcmpg", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare g (1 if child1 > child2 or unordered, 0 if child1 == child2, -1 if child1 < child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpl, \
   /* .name                 = */ "dcmpl", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare l (1 if child1 > child2, 0 if child1 == child2, -1 if child1 < child2 or unordered) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcmpg, \
   /* .name                 = */ "dcmpg", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare g (1 if child1 > child2 or unordered, 0 if child1 == child2, -1 if child1 < child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ificmpeq, \
   /* .name                 = */ "ificmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ificmpeq, \
   /* .reverseBranchOpCode  = */ TR::ificmpne, \
   /* .booleanCompareOpCode = */ TR::icmpeq, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    integer compare and branch if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ificmpne, \
   /* .name                 = */ "ificmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ificmpne, \
   /* .reverseBranchOpCode  = */ TR::ificmpeq, \
   /* .booleanCompareOpCode = */ TR::icmpne, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    integer compare and branch if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ificmplt, \
   /* .name                 = */ "ificmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ificmpgt, \
   /* .reverseBranchOpCode  = */ TR::ificmpge, \
   /* .booleanCompareOpCode = */ TR::icmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    integer compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ificmpge, \
   /* .name                 = */ "ificmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ificmple, \
   /* .reverseBranchOpCode  = */ TR::ificmplt, \
   /* .booleanCompareOpCode = */ TR::icmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    integer compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ificmpgt, \
   /* .name                 = */ "ificmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ificmplt, \
   /* .reverseBranchOpCode  = */ TR::ificmple, \
   /* .booleanCompareOpCode = */ TR::icmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    integer compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ificmple, \
   /* .name                 = */ "ificmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ificmpge, \
   /* .reverseBranchOpCode  = */ TR::ificmpgt, \
   /* .booleanCompareOpCode = */ TR::icmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    integer compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifiucmplt, \
   /* .name                 = */ "ifiucmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ifiucmpgt, \
   /* .reverseBranchOpCode  = */ TR::ifiucmpge, \
   /* .booleanCompareOpCode = */ TR::iucmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned integer compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifiucmpge, \
   /* .name                 = */ "ifiucmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ifiucmple, \
   /* .reverseBranchOpCode  = */ TR::ifiucmplt, \
   /* .booleanCompareOpCode = */ TR::iucmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned integer compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifiucmpgt, \
   /* .name                 = */ "ifiucmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ifiucmplt, \
   /* .reverseBranchOpCode  = */ TR::ifiucmple, \
   /* .booleanCompareOpCode = */ TR::iucmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned integer compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifiucmple, \
   /* .name                 = */ "ifiucmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::ifiucmpge, \
   /* .reverseBranchOpCode  = */ TR::ifiucmpgt, \
   /* .booleanCompareOpCode = */ TR::iucmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned integer compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflcmpeq, \
   /* .name                 = */ "iflcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::iflcmpeq, \
   /* .reverseBranchOpCode  = */ TR::iflcmpne, \
   /* .booleanCompareOpCode = */ TR::lcmpeq, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    long compare and branch if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflcmpne, \
   /* .name                 = */ "iflcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::iflcmpne, \
   /* .reverseBranchOpCode  = */ TR::iflcmpeq, \
   /* .booleanCompareOpCode = */ TR::lcmpne, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    long compare and branch if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflcmplt, \
   /* .name                 = */ "iflcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::iflcmpgt, \
   /* .reverseBranchOpCode  = */ TR::iflcmpge, \
   /* .booleanCompareOpCode = */ TR::lcmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    long compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflcmpge, \
   /* .name                 = */ "iflcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::iflcmple, \
   /* .reverseBranchOpCode  = */ TR::iflcmplt, \
   /* .booleanCompareOpCode = */ TR::lcmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    long compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflcmpgt, \
   /* .name                 = */ "iflcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::iflcmplt, \
   /* .reverseBranchOpCode  = */ TR::iflcmple, \
   /* .booleanCompareOpCode = */ TR::lcmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    long compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflcmple, \
   /* .name                 = */ "iflcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::iflcmpge, \
   /* .reverseBranchOpCode  = */ TR::iflcmpgt, \
   /* .booleanCompareOpCode = */ TR::lcmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    long compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflucmplt, \
   /* .name                 = */ "iflucmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::iflucmpgt, \
   /* .reverseBranchOpCode  = */ TR::iflucmpge, \
   /* .booleanCompareOpCode = */ TR::lucmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned long compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflucmpge, \
   /* .name                 = */ "iflucmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::iflucmple, \
   /* .reverseBranchOpCode  = */ TR::iflucmplt, \
   /* .booleanCompareOpCode = */ TR::lucmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned long compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflucmpgt, \
   /* .name                 = */ "iflucmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::iflucmplt, \
   /* .reverseBranchOpCode  = */ TR::iflucmple, \
   /* .booleanCompareOpCode = */ TR::lucmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned long compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflucmple, \
   /* .name                 = */ "iflucmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::iflucmpge, \
   /* .reverseBranchOpCode  = */ TR::iflucmpgt, \
   /* .booleanCompareOpCode = */ TR::lucmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned long compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmpeq, \
   /* .name                 = */ "iffcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmpeq, \
   /* .reverseBranchOpCode  = */ TR::iffcmpneu, \
   /* .booleanCompareOpCode = */ TR::fcmpeq, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmpne, \
   /* .name                 = */ "iffcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmpne, \
   /* .reverseBranchOpCode  = */ TR::iffcmpequ, \
   /* .booleanCompareOpCode = */ TR::fcmpne, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmplt, \
   /* .name                 = */ "iffcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmpgt, \
   /* .reverseBranchOpCode  = */ TR::iffcmpgeu, \
   /* .booleanCompareOpCode = */ TR::fcmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmpge, \
   /* .name                 = */ "iffcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmple, \
   /* .reverseBranchOpCode  = */ TR::iffcmpltu, \
   /* .booleanCompareOpCode = */ TR::fcmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmpgt, \
   /* .name                 = */ "iffcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmplt, \
   /* .reverseBranchOpCode  = */ TR::iffcmpleu, \
   /* .booleanCompareOpCode = */ TR::fcmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmple, \
   /* .name                 = */ "iffcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmpge, \
   /* .reverseBranchOpCode  = */ TR::iffcmpgtu, \
   /* .booleanCompareOpCode = */ TR::fcmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmpequ, \
   /* .name                 = */ "iffcmpequ", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmpequ, \
   /* .reverseBranchOpCode  = */ TR::iffcmpne, \
   /* .booleanCompareOpCode = */ TR::fcmpequ, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmpneu, \
   /* .name                 = */ "iffcmpneu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmpneu, \
   /* .reverseBranchOpCode  = */ TR::iffcmpeq, \
   /* .booleanCompareOpCode = */ TR::fcmpneu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if not equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmpltu, \
   /* .name                 = */ "iffcmpltu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmpgtu, \
   /* .reverseBranchOpCode  = */ TR::iffcmpge, \
   /* .booleanCompareOpCode = */ TR::fcmpltu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if less than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmpgeu, \
   /* .name                 = */ "iffcmpgeu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmpleu, \
   /* .reverseBranchOpCode  = */ TR::iffcmplt, \
   /* .booleanCompareOpCode = */ TR::fcmpgeu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if greater than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmpgtu, \
   /* .name                 = */ "iffcmpgtu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmpltu, \
   /* .reverseBranchOpCode  = */ TR::iffcmple, \
   /* .booleanCompareOpCode = */ TR::fcmpgtu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if greater than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iffcmpleu, \
   /* .name                 = */ "iffcmpleu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::iffcmpgeu, \
   /* .reverseBranchOpCode  = */ TR::iffcmpgt, \
   /* .booleanCompareOpCode = */ TR::fcmpleu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float compare and branch if less than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmpeq, \
   /* .name                 = */ "ifdcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmpeq, \
   /* .reverseBranchOpCode  = */ TR::ifdcmpneu, \
   /* .booleanCompareOpCode = */ TR::dcmpeq, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmpne, \
   /* .name                 = */ "ifdcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmpne, \
   /* .reverseBranchOpCode  = */ TR::ifdcmpequ, \
   /* .booleanCompareOpCode = */ TR::dcmpne, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmplt, \
   /* .name                 = */ "ifdcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmpgt, \
   /* .reverseBranchOpCode  = */ TR::ifdcmpgeu, \
   /* .booleanCompareOpCode = */ TR::dcmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmpge, \
   /* .name                 = */ "ifdcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmple, \
   /* .reverseBranchOpCode  = */ TR::ifdcmpltu, \
   /* .booleanCompareOpCode = */ TR::dcmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmpgt, \
   /* .name                 = */ "ifdcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmplt, \
   /* .reverseBranchOpCode  = */ TR::ifdcmpleu, \
   /* .booleanCompareOpCode = */ TR::dcmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmple, \
   /* .name                 = */ "ifdcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmpge, \
   /* .reverseBranchOpCode  = */ TR::ifdcmpgtu, \
   /* .booleanCompareOpCode = */ TR::dcmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmpequ, \
   /* .name                 = */ "ifdcmpequ", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmpequ, \
   /* .reverseBranchOpCode  = */ TR::ifdcmpne, \
   /* .booleanCompareOpCode = */ TR::dcmpequ, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmpneu, \
   /* .name                 = */ "ifdcmpneu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmpneu, \
   /* .reverseBranchOpCode  = */ TR::ifdcmpeq, \
   /* .booleanCompareOpCode = */ TR::dcmpneu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if not equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmpltu, \
   /* .name                 = */ "ifdcmpltu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmpgtu, \
   /* .reverseBranchOpCode  = */ TR::ifdcmpge, \
   /* .booleanCompareOpCode = */ TR::dcmpltu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if less than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmpgeu, \
   /* .name                 = */ "ifdcmpgeu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmpleu, \
   /* .reverseBranchOpCode  = */ TR::ifdcmplt, \
   /* .booleanCompareOpCode = */ TR::dcmpgeu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if greater than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmpgtu, \
   /* .name                 = */ "ifdcmpgtu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmpltu, \
   /* .reverseBranchOpCode  = */ TR::ifdcmple, \
   /* .booleanCompareOpCode = */ TR::dcmpgtu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if greater than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdcmpleu, \
   /* .name                 = */ "ifdcmpleu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::ifdcmpgeu, \
   /* .reverseBranchOpCode  = */ TR::ifdcmpgt, \
   /* .booleanCompareOpCode = */ TR::dcmpleu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double compare and branch if less than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifacmpeq, \
   /* .name                 = */ "ifacmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::ifacmpeq, \
   /* .reverseBranchOpCode  = */ TR::ifacmpne, \
   /* .booleanCompareOpCode = */ TR::acmpeq, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    address compare and branch if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifacmpne, \
   /* .name                 = */ "ifacmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::ifacmpne, \
   /* .reverseBranchOpCode  = */ TR::ifacmpeq, \
   /* .booleanCompareOpCode = */ TR::acmpne, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    address compare and branch if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifacmplt, \
   /* .name                 = */ "ifacmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::ifacmpgt, \
   /* .reverseBranchOpCode  = */ TR::ifacmpge, \
   /* .booleanCompareOpCode = */ TR::acmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    address compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifacmpge, \
   /* .name                 = */ "ifacmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::ifacmple, \
   /* .reverseBranchOpCode  = */ TR::ifacmplt, \
   /* .booleanCompareOpCode = */ TR::acmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    address compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifacmpgt, \
   /* .name                 = */ "ifacmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::ifacmplt, \
   /* .reverseBranchOpCode  = */ TR::ifacmple, \
   /* .booleanCompareOpCode = */ TR::acmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    address compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifacmple, \
   /* .name                 = */ "ifacmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::ifacmpge, \
   /* .reverseBranchOpCode  = */ TR::ifacmpgt, \
   /* .booleanCompareOpCode = */ TR::acmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    address compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifbcmpeq, \
   /* .name                 = */ "ifbcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::ifbcmpeq, \
   /* .reverseBranchOpCode  = */ TR::ifbcmpne, \
   /* .booleanCompareOpCode = */ TR::bcmpeq, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    byte compare and branch if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifbcmpne, \
   /* .name                 = */ "ifbcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::ifbcmpne, \
   /* .reverseBranchOpCode  = */ TR::ifbcmpeq, \
   /* .booleanCompareOpCode = */ TR::bcmpne, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    byte compare and branch if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifbcmplt, \
   /* .name                 = */ "ifbcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::ifbcmpgt, \
   /* .reverseBranchOpCode  = */ TR::ifbcmpge, \
   /* .booleanCompareOpCode = */ TR::bcmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    byte compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifbcmpge, \
   /* .name                 = */ "ifbcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::ifbcmple, \
   /* .reverseBranchOpCode  = */ TR::ifbcmplt, \
   /* .booleanCompareOpCode = */ TR::bcmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    byte compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifbcmpgt, \
   /* .name                 = */ "ifbcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::ifbcmplt, \
   /* .reverseBranchOpCode  = */ TR::ifbcmple, \
   /* .booleanCompareOpCode = */ TR::bcmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    byte compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifbcmple, \
   /* .name                 = */ "ifbcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::ifbcmpge, \
   /* .reverseBranchOpCode  = */ TR::ifbcmpgt, \
   /* .booleanCompareOpCode = */ TR::bcmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    byte compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifbucmplt, \
   /* .name                 = */ "ifbucmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::ifbucmpgt, \
   /* .reverseBranchOpCode  = */ TR::ifbucmpge, \
   /* .booleanCompareOpCode = */ TR::bucmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned byte compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifbucmpge, \
   /* .name                 = */ "ifbucmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::ifbucmple, \
   /* .reverseBranchOpCode  = */ TR::ifbucmplt, \
   /* .booleanCompareOpCode = */ TR::bucmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned byte compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifbucmpgt, \
   /* .name                 = */ "ifbucmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::ifbucmplt, \
   /* .reverseBranchOpCode  = */ TR::ifbucmple, \
   /* .booleanCompareOpCode = */ TR::bucmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned byte compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifbucmple, \
   /* .name                 = */ "ifbucmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::ifbucmpge, \
   /* .reverseBranchOpCode  = */ TR::ifbucmpgt, \
   /* .booleanCompareOpCode = */ TR::bucmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned byte compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifscmpeq, \
   /* .name                 = */ "ifscmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::ifscmpeq, \
   /* .reverseBranchOpCode  = */ TR::ifscmpne, \
   /* .booleanCompareOpCode = */ TR::scmpeq, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    short integer compare and branch if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifscmpne, \
   /* .name                 = */ "ifscmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::ifscmpne, \
   /* .reverseBranchOpCode  = */ TR::ifscmpeq, \
   /* .booleanCompareOpCode = */ TR::scmpne, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    short integer compare and branch if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifscmplt, \
   /* .name                 = */ "ifscmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::ifscmpgt, \
   /* .reverseBranchOpCode  = */ TR::ifscmpge, \
   /* .booleanCompareOpCode = */ TR::scmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    short integer compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifscmpge, \
   /* .name                 = */ "ifscmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::ifscmple, \
   /* .reverseBranchOpCode  = */ TR::ifscmplt, \
   /* .booleanCompareOpCode = */ TR::scmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    short integer compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifscmpgt, \
   /* .name                 = */ "ifscmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::ifscmplt, \
   /* .reverseBranchOpCode  = */ TR::ifscmple, \
   /* .booleanCompareOpCode = */ TR::scmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    short integer compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifscmple, \
   /* .name                 = */ "ifscmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::ifscmpge, \
   /* .reverseBranchOpCode  = */ TR::ifscmpgt, \
   /* .booleanCompareOpCode = */ TR::scmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    short integer compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifsucmplt, \
   /* .name                 = */ "ifsucmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::ifsucmpgt, \
   /* .reverseBranchOpCode  = */ TR::ifsucmpge, \
   /* .booleanCompareOpCode = */ TR::sucmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    char compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifsucmpge, \
   /* .name                 = */ "ifsucmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::ifsucmple, \
   /* .reverseBranchOpCode  = */ TR::ifsucmplt, \
   /* .booleanCompareOpCode = */ TR::sucmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    char compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifsucmpgt, \
   /* .name                 = */ "ifsucmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::ifsucmplt, \
   /* .reverseBranchOpCode  = */ TR::ifsucmple, \
   /* .booleanCompareOpCode = */ TR::sucmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    char compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifsucmple, \
   /* .name                 = */ "ifsucmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::ifsucmpge, \
   /* .reverseBranchOpCode  = */ TR::ifsucmpgt, \
   /* .booleanCompareOpCode = */ TR::sucmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    char compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ loadaddr, \
   /* .name                 = */ "loadaddr", \
   /* .properties1          = */ ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack | ILProp2::LoadAddress, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load address of non-heap storage item (Auto, Parm, Static or Method) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ZEROCHK, \
   /* .name                 = */ "ZEROCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::Check| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Zero-check an int.  Symref indicates call to perform when first child is zero.  Other children are arguments to the call. */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iRegLoad, \
   /* .name                 = */ "iRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load integer global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ aRegLoad, \
   /* .name                 = */ "aRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load address global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lRegLoad, \
   /* .name                 = */ "lRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load long integer global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fRegLoad, \
   /* .name                 = */ "fRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load float global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dRegLoad, \
   /* .name                 = */ "dRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load double global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sRegLoad, \
   /* .name                 = */ "sRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load short global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bRegLoad, \
   /* .name                 = */ "bRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load byte global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iRegStore, \
   /* .name                 = */ "iRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store integer global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ aRegStore, \
   /* .name                 = */ "aRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store address global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lRegStore, \
   /* .name                 = */ "lRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store long integer global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fRegStore, \
   /* .name                 = */ "fRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store float global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dRegStore, \
   /* .name                 = */ "dRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store double global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sRegStore, \
   /* .name                 = */ "sRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store short global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bRegStore, \
   /* .name                 = */ "bRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store byte global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ GlRegDeps, \
   /* .name                 = */ "GlRegDeps", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Global Register Dependency List */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iselect, \
   /* .name                 = */ "iselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Int32, TR::Int32, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Select Operator:  Based on the result of the first child, take the value of the */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lselect, \
   /* .name                 = */ "lselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Int32, TR::Int64, TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    second (first child evaluates to true) or third(first child evaluates to false) child */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bselect, \
   /* .name                 = */ "bselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Int32, TR::Int8, TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sselect, \
   /* .name                 = */ "sselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Int32, TR::Int16, TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ aselect, \
   /* .name                 = */ "aselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ THREE_CHILD(TR::Int32, TR::Address, TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fselect, \
   /* .name                 = */ "fselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ THREE_CHILD(TR::Int32, TR::Float, TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dselect, \
   /* .name                 = */ "dselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ THREE_CHILD(TR::Int32, TR::Double, TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ treetop, \
   /* .name                 = */ "treetop", \
   /* .properties1          = */ ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    tree top to anchor subtrees with side-effects */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ MethodEnterHook, \
   /* .name                 = */ "MethodEnterHook", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::MustBeLowered| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    called after a frame is built, temps initialized, and monitor acquired (if necessary) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ MethodExitHook, \
   /* .name                 = */ "MethodExitHook", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::MustBeLowered| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    called immediately before returning, frame not yet collapsed, monitor released (if necessary) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ PassThrough, \
   /* .name                 = */ "PassThrough", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Dummy node that represents its single child. */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ compressedRefs, \
   /* .name                 = */ "compressedRefs", \
   /* .properties1          = */ ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ TWO_CHILD(ILChildProp::UnspecifiedChildType, TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    no-op anchor providing optimizable subexpressions used for compression/decompression.  First child is address load/store, second child is heap base displacement */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ BBStart, \
   /* .name                 = */ "BBStart", \
   /* .properties1          = */ ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Start of Basic Block */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ BBEnd, \
   /* .name                 = */ "BBEnd", \
   /* .properties1          = */ ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    End of Basic Block */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vimin, \
   /* .name                 = */ "vimin", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector integer minimum */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vimax, \
   /* .name                 = */ "vimax", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector integer maximum */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vigetelem, \
   /* .name                 = */ "vigetelem", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    get vector int element */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ visetelem, \
   /* .name                 = */ "visetelem", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    set vector int element */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vimergel, \
   /* .name                 = */ "vimergel", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector int merge low */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vimergeh, \
   /* .name                 = */ "vimergeh", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector int merge high */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vicmpeq, \
   /* .name                 = */ "vicmpeq", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector integer compare equal  (return vector mask) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vicmpgt, \
   /* .name                 = */ "vicmpgt", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector integer compare greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vicmpge, \
   /* .name                 = */ "vicmpge", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector integer compare greater equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vicmplt, \
   /* .name                 = */ "vicmplt", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector integer compare less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vicmple, \
   /* .name                 = */ "vicmple", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector integer compare less equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vnot, \
   /* .name                 = */ "vnot", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::HasNoDataType | ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector boolean not */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vbitselect, \
   /* .name                 = */ "vbitselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector bit select */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vperm, \
   /* .name                 = */ "vperm", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector permute */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vsplats, \
   /* .name                 = */ "vsplats", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector splats */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdmergel, \
   /* .name                 = */ "vdmergel", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Double, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector double merge low */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdmergeh, \
   /* .name                 = */ "vdmergeh", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Double, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector double merge high */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdsetelem, \
   /* .name                 = */ "vdsetelem", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Double, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    set vector double element */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdgetelem, \
   /* .name                 = */ "vdgetelem", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    get vector double element */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdsel, \
   /* .name                 = */ "vdsel", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Double, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    get vector select double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdmax, \
   /* .name                 = */ "vdmax", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Max, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Double, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector double maximum */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdmin, \
   /* .name                 = */ "vdmin", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Min, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Double, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector double minimum */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdcmpeq, \
   /* .name                 = */ "vdcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vdcmpeq, \
   /* .reverseBranchOpCode  = */ TR::vdcmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector double compare equal  (return vector mask) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdcmpne, \
   /* .name                 = */ "vdcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vdcmpne, \
   /* .reverseBranchOpCode  = */ TR::vdcmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector double compare not equal  (return vector mask) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdcmpgt, \
   /* .name                 = */ "vdcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vdcmplt, \
   /* .reverseBranchOpCode  = */ TR::vdcmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector double compare greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdcmpge, \
   /* .name                 = */ "vdcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vdcmple, \
   /* .reverseBranchOpCode  = */ TR::vdcmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector double compare greater equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdcmplt, \
   /* .name                 = */ "vdcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vdcmpgt, \
   /* .reverseBranchOpCode  = */ TR::vdcmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector double compare less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdcmple, \
   /* .name                 = */ "vdcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vdcmpge, \
   /* .reverseBranchOpCode  = */ TR::vdcmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector double compare less equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdsqrt, \
   /* .name                 = */ "vdsqrt", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Double, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::Vector, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector double square root */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vneg, \
   /* .name                 = */ "vneg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector negation */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vadd, \
   /* .name                 = */ "vadd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector add */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vsub, \
   /* .name                 = */ "vsub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector subtract */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vmul, \
   /* .name                 = */ "vmul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector multiply */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdiv, \
   /* .name                 = */ "vdiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector divide */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vand, \
   /* .name                 = */ "vand", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::And, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector logical AND */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vor, \
   /* .name                 = */ "vor", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Or, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector logical OR */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vxor, \
   /* .name                 = */ "vxor", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Xor, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector exclusive OR integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vcmpeq, \
   /* .name                 = */ "vcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vcmpeq, \
   /* .reverseBranchOpCode  = */ TR::vcmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ificmpeq, \
   /* .description          =    vector compare equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vcmpne, \
   /* .name                 = */ "vcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vcmpne, \
   /* .reverseBranchOpCode  = */ TR::vcmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector compare not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vcmplt, \
   /* .name                 = */ "vcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vcmpgt, \
   /* .reverseBranchOpCode  = */ TR::vcmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector compare less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vcmpgt, \
   /* .name                 = */ "vcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vcmplt, \
   /* .reverseBranchOpCode  = */ TR::vcmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector compare greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vcmple, \
   /* .name                 = */ "vcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vcmpge, \
   /* .reverseBranchOpCode  = */ TR::vcmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector compare less or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vcmpge, \
   /* .name                 = */ "vcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::vcmple, \
   /* .reverseBranchOpCode  = */ TR::vcmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector compare greater or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vload, \
   /* .name                 = */ "vload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load vector */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vloadi, \
   /* .name                 = */ "vloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load indirect vector */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vstore, \
   /* .name                 = */ "vstore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store vector */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vstorei, \
   /* .name                 = */ "vstorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store indirect vector */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vreturn, \
   /* .name                 = */ "vreturn", \
   /* .properties1          = */ ILProp1::Return | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    return a vector */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vcall, \
   /* .name                 = */ "vcall", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    direct call returning a vector */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vcalli, \
   /* .name                 = */ "vcalli", \
   /* .properties1          = */ ILProp1::Indirect | ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect call returning a vector */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vselect, \
   /* .name                 = */ "vselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector select operator */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ v2v, \
   /* .name                 = */ "v2v", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector to vector conversion. preserves bit pattern (noop), only changes datatype */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vl2vd, \
   /* .name                 = */ "vl2vd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Double, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector to vector conversion. converts each long element to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vconst, \
   /* .name                 = */ "vconst", \
   /* .properties1          = */ ILProp1::LoadConst, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector constant */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ getvelem, \
   /* .name                 = */ "getvelem", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    get vector element, returns a scalar */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vsetelem, \
   /* .name                 = */ "vsetelem", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Vector | ILTypeProp::HasNoDataType, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    vector set element */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vbRegLoad, \
   /* .name                 = */ "vbRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vsRegLoad, \
   /* .name                 = */ "vsRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ viRegLoad, \
   /* .name                 = */ "viRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vlRegLoad, \
   /* .name                 = */ "vlRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vfRegLoad, \
   /* .name                 = */ "vfRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Float, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdRegLoad, \
   /* .name                 = */ "vdRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Double, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vbRegStore, \
   /* .name                 = */ "vbRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vsRegStore, \
   /* .name                 = */ "vsRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ viRegStore, \
   /* .name                 = */ "viRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vlRegStore, \
   /* .name                 = */ "vlRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vfRegStore, \
   /* .name                 = */ "vfRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Float, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ vdRegStore, \
   /* .name                 = */ "vdRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Vector128Double, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Integer | ILTypeProp::Vector, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store vector global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2iu, \
   /* .name                 = */ "f2iu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to unsigned integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2lu, \
   /* .name                 = */ "f2lu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to unsigned long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2bu, \
   /* .name                 = */ "f2bu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to unsigned byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2c, \
   /* .name                 = */ "f2c", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to char */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2iu, \
   /* .name                 = */ "d2iu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to unsigned integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2lu, \
   /* .name                 = */ "d2lu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to unsigned long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2bu, \
   /* .name                 = */ "d2bu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to unsigned byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2c, \
   /* .name                 = */ "d2c", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to char */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ monent, \
   /* .name                 = */ "monent", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    acquire lock for synchronising method */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ monexit, \
   /* .name                 = */ "monexit", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    release lock for synchronising method */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ monexitfence, \
   /* .name                 = */ "monexitfence", \
   /* .properties1          = */ ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::CanRaiseException| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    denotes the end of a monitored region solely for live monitor meta data */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ tstart, \
   /* .name                 = */ "tstart", \
   /* .properties1          = */ ILProp1::HasSymbolRef | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::JumpWithMultipleTargets, \
   /* .properties3          = */ ILProp3::HasBranchChild, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ THREE_SAME_CHILD(TR::NoType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    transaction begin */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ tfinish, \
   /* .name                 = */ "tfinish", \
   /* .properties1          = */ ILProp1::HasSymbolRef | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    transaction end */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ tabort, \
   /* .name                 = */ "tabort", \
   /* .properties1          = */ ILProp1::HasSymbolRef | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    transaction abort */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ instanceof, \
   /* .name                 = */ "instanceof", \
   /* .properties1          = */ ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    instanceof - symref is the class object, cp index is in the */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ checkcast, \
   /* .name                 = */ "checkcast", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::Check | ILProp2::CheckCast| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    checkcast */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ checkcastAndNULLCHK, \
   /* .name                 = */ "checkcastAndNULLCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::Check | ILProp2::CheckCast| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    checkcast and NULL check the underlying object reference */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ New, \
   /* .name                 = */ "new", \
   /* .properties1          = */ ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException| ILProp2::MayUseSystemStack | ILProp2::New, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    new - child is class */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ newvalue, \
   /* .name                 = */ "newvalue", \
   /* .properties1          = */ ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException| ILProp2::MayUseSystemStack | ILProp2::New, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    allocate and initialize - children provide field values */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ newarray, \
   /* .name                 = */ "newarray", \
   /* .properties1          = */ ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException| ILProp2::MayUseSystemStack | ILProp2::New, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    new array of primitives */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ anewarray, \
   /* .name                 = */ "anewarray", \
   /* .properties1          = */ ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException| ILProp2::MayUseSystemStack | ILProp2::New, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    new array of objects */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ variableNew, \
   /* .name                 = */ "variableNew", \
   /* .properties1          = */ ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    new - child is class, type not known at compile time */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ variableNewArray, \
   /* .name                 = */ "variableNewArray", \
   /* .properties1          = */ ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    new array - type not known at compile time, type must be a j9class, do not use type enums */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ multianewarray, \
   /* .name                 = */ "multianewarray", \
   /* .properties1          = */ ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::MustBeLowered | ILProp2::CanRaiseException| ILProp2::MayUseSystemStack | ILProp2::New, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multi-dimensional new array of objects */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ arraylength, \
   /* .name                 = */ "arraylength", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::MustBeLowered | ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::ArrayLength, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    number of elements in an array */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ contigarraylength, \
   /* .name                 = */ "contigarraylength", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::MustBeLowered | ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::ArrayLength, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    number of elements in a contiguous array */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ discontigarraylength, \
   /* .name                 = */ "discontigarraylength", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::MustBeLowered | ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::ArrayLength, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    number of elements in a discontiguous array */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ icalli, \
   /* .name                 = */ "icalli", \
   /* .properties1          = */ ILProp1::Indirect | ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::IndirectCallType, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect call returning integer (child1 is addr of function) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lcalli, \
   /* .name                 = */ "lcalli", \
   /* .properties1          = */ ILProp1::Indirect | ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::IndirectCallType, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect call returning long integer (child1 is addr of function) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fcalli, \
   /* .name                 = */ "fcalli", \
   /* .properties1          = */ ILProp1::Indirect | ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ILChildProp::IndirectCallType, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect call returning float (child1 is addr of function) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dcalli, \
   /* .name                 = */ "dcalli", \
   /* .properties1          = */ ILProp1::Indirect | ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ILChildProp::IndirectCallType, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect call returning double (child1 is addr of function) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ acalli, \
   /* .name                 = */ "acalli", \
   /* .properties1          = */ ILProp1::Indirect | ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ILChildProp::IndirectCallType, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect call returning reference */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ calli, \
   /* .name                 = */ "calli", \
   /* .properties1          = */ ILProp1::Indirect | ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::IndirectCallType, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect call returning void (child1 is addr of function) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fence, \
   /* .name                 = */ "fence", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::Fence | ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    barrier to optimization */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ luaddh, \
   /* .name                 = */ "luaddh", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::luaddh, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add 2 unsigned long integers (the high parts of prior luadd) as high part of 128bit addition. */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ aiadd, \
   /* .name                 = */ "aiadd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add integer to address with address result (child1 a, child2 i) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ aladd, \
   /* .name                 = */ "aladd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add long integer to address with address result (child1 a, child2 i) (64-bit only) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lusubh, \
   /* .name                 = */ "lusubh", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    subtract 2 unsigned long integers (the high parts of prior lusub) as high part of 128bit subtraction. */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ imulh, \
   /* .name                 = */ "imulh", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::imulh, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 integers, and return the high word of the product */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iumulh, \
   /* .name                 = */ "iumulh", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::iumulh, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 unsigned integers, and return the high word of the product */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lmulh, \
   /* .name                 = */ "lmulh", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lmulh, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 long integers, and return the high word of the product */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lumulh, \
   /* .name                 = */ "lumulh", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::lumulh, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 unsigned long integers, and return the high word of the product */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ibits2f, \
   /* .name                 = */ "ibits2f", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    type-coerce int to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fbits2i, \
   /* .name                 = */ "fbits2i", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    type-coerce float to int */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lbits2d, \
   /* .name                 = */ "lbits2d", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    type-coerce long to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dbits2l, \
   /* .name                 = */ "dbits2l", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    type-coerce double to long */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lookup, \
   /* .name                 = */ "lookup", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::Switch, \
   /* .properties2          = */ ILProp2::JumpWithMultipleTargets, \
   /* .properties3          = */ ILProp3::HasBranchChild, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    lookupswitch (child1 is selector expression, child2 the default destination, subsequent children are case nodes */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ Case, \
   /* .name                 = */ "case", \
   /* .properties1          = */ ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    case nodes that are children of TR_switch.  Uses the branchdestination and the int const field */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ table, \
   /* .name                 = */ "table", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::Switch, \
   /* .properties2          = */ ILProp2::JumpWithMultipleTargets, \
   /* .properties3          = */ ILProp3::HasBranchChild, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    tableswitch (child1 is the selector, child2 the default destination, subsequent children are the branch targets */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ exceptionRangeFence, \
   /* .name                 = */ "exceptionRangeFence", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::ExceptionRangeFence, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    (J9) SymbolReference is the aliasing effect, initializer is where the code address gets put when binary is generated */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ NULLCHK, \
   /* .name                 = */ "NULLCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::CanRaiseException | ILProp2::Check | ILProp2::NullCheck| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Null check a pointer.  child 1 is indirect reference. Symbolref indicates failure action/destination */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ResolveCHK, \
   /* .name                 = */ "ResolveCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::CanRaiseException | ILProp2::Check | ILProp2::ResolveCheck| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Resolve check a static, field or method. child 1 is reference to be resolved. Symbolref indicates failure action/destination */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ResolveAndNULLCHK, \
   /* .name                 = */ "ResolveAndNULLCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::CanRaiseException | ILProp2::Check | ILProp2::NullCheck | ILProp2::ResolveCheck| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Resolve check a static, field or method and Null check the underlying pointer.  child 1 is reference to be resolved. Symbolref indicates failure action/destination */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ DIVCHK, \
   /* .name                 = */ "DIVCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::Check| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Divide by zero check. child 1 is the divide. Symbolref indicates failure action/destination */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ OverflowCHK, \
   /* .name                 = */ "OverflowCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::Check| ILProp2::MayUseSystemStack | ILProp2::CanRaiseException, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Overflow check. child 1 is the operation node(add, mul, sub). Child 2 and child 3 are the operands of the operation of the operation. Symbolref indicates failure action/destination */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ UnsignedOverflowCHK, \
   /* .name                 = */ "UnsignedOverflowCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::Check| ILProp2::MayUseSystemStack | ILProp2::CanRaiseException, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    UnsignedOverflow check. child 1 is the operation node(add, mul, sub). Child 2 and child 3 are the operands of the operation of the operation. Symbolref indicates failure action/destination */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ BNDCHK, \
   /* .name                 = */ "BNDCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::CanRaiseException | ILProp2::Check | ILProp2::BndCheck| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Array bounds check, checks that child 1 > child 2 >= 0 (child 1 is bound, 2 is index). Symbolref indicates failure action/destination */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ArrayCopyBNDCHK, \
   /* .name                 = */ "ArrayCopyBNDCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::CanRaiseException | ILProp2::Check | ILProp2::BndCheck| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Array copy bounds check, checks that child 1 >= child 2. Symbolref indicates failure action/destination */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ BNDCHKwithSpineCHK, \
   /* .name                 = */ "BNDCHKwithSpineCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::CanRaiseException | ILProp2::Check | ILProp2::BndCheck| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::SpineCheck, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Array bounds check and spine check */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ SpineCHK, \
   /* .name                 = */ "SpineCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::Check, \
   /* .properties3          = */ ILProp3::SpineCheck, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Check if the base array has a spine */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ArrayStoreCHK, \
   /* .name                 = */ "ArrayStoreCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::CanRaiseException | ILProp2::Check| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Array store check. child 1 is object, 2 is array. Symbolref indicates failure action/destination */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ArrayCHK, \
   /* .name                 = */ "ArrayCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::CanRaiseException | ILProp2::Check| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Address, \
   /* .typeProperties       = */ ILTypeProp::Reference, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Array compatibility check. child 1 is object1, 2 is object2. Symbolref indicates failure action/destination */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ arraycopy, \
   /* .name                 = */ "arraycopy", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::MayUseSystemStack | ILProp2::CanRaiseException | 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef | ILProp3::SkipDynamicLitPoolOnInts, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Call to System.arraycopy that may be partially inlined */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ arrayset, \
   /* .name                 = */ "arrayset", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef | ILProp3::SkipDynamicLitPoolOnInts, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Inline code for memory initialization of part of an array */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ arraytranslate, \
   /* .name                 = */ "arraytranslate", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Inline code for translation of part of an array to another form via lookup */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ arraytranslateAndTest, \
   /* .name                 = */ "arraytranslateAndTest", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::BndCheck, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Inline code for scanning of part of an array for a particular 8-bit character */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ long2String, \
   /* .name                 = */ "long2String", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Convert integer/long value to String */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bitOpMem, \
   /* .name                 = */ "bitOpMem", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CondCodeComputation, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef | ILProp3::SkipDynamicLitPoolOnInts, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    bit operations (AND, OR, XOR) for memory to memory */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ arraycmp, \
   /* .name                 = */ "arraycmp", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CondCodeComputation, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef | ILProp3::SkipDynamicLitPoolOnInts, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Address, TR::Address, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Inline code for memory comparison of part of an array */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ allocationFence, \
   /* .name                 = */ "allocationFence", \
   /* .properties1          = */ ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Internal fence guarding escape of newObject & final fields - eliminatable */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ loadFence, \
   /* .name                 = */ "loadFence", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    JEP171: prohibits loadLoad and loadStore reordering (on globals) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ storeFence, \
   /* .name                 = */ "storeFence", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    JEP171: prohibits loadStore and storeStore reordering (on globals) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fullFence, \
   /* .name                 = */ "fullFence", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    JEP171: prohibits loadLoad, loadStore, storeLoad, and storeStore reordering (on globals) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ computeCC, \
   /* .name                 = */ "computeCC", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::CondCodeComputation, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    compute Condition Codes */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ butest, \
   /* .name                 = */ "butest", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::CondCodeComputation, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zEmulator: mask unsigned byte (UInt8) and set condition codes */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sutest, \
   /* .name                 = */ "sutest", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::CondCodeComputation, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zEmulator: mask unsigned short (UInt16) and set condition codes */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bucmp, \
   /* .name                 = */ "bucmp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare | ILProp2::CondCodeComputation, \
   /* .properties3          = */ ILProp3::Signum, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Currently only valid for zEmulator. Based on the ordering of the two children set the return value: */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bcmp, \
   /* .name                 = */ "bcmp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::CondCodeComputation, \
   /* .properties3          = */ ILProp3::Signum, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    0 : child1 == child2 */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sucmp, \
   /* .name                 = */ "sucmp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare | ILProp2::CondCodeComputation, \
   /* .properties3          = */ ILProp3::Signum, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    1 : child1 < child2 */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ scmp, \
   /* .name                 = */ "scmp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::CondCodeComputation, \
   /* .properties3          = */ ILProp3::Signum, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    2 : child1 > child2 */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iucmp, \
   /* .name                 = */ "iucmp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare | ILProp2::CondCodeComputation, \
   /* .properties3          = */ ILProp3::Signum, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ icmp, \
   /* .name                 = */ "icmp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::CondCodeComputation, \
   /* .properties3          = */ ILProp3::Signum, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lucmp, \
   /* .name                 = */ "lucmp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::UnsignedCompare | ILProp2::CondCodeComputation, \
   /* .properties3          = */ ILProp3::Signum, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ificmpo, \
   /* .name                 = */ "ificmpo", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::OverflowCompare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::ificmpno, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    integer compare and branch if overflow */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ificmpno, \
   /* .name                 = */ "ificmpno", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::OverflowCompare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::ificmpo, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    integer compare and branch if not overflow */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflcmpo, \
   /* .name                 = */ "iflcmpo", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::OverflowCompare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::iflcmpno, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    long compare and branch if overflow */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflcmpno, \
   /* .name                 = */ "iflcmpno", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::OverflowCompare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::iflcmpo, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    long compare and branch if not overflow */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ificmno, \
   /* .name                 = */ "ificmno", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::OverflowCompare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::ificmnno, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    integer compare negative and branch if overflow */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ificmnno, \
   /* .name                 = */ "ificmnno", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::OverflowCompare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::ificmno, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    integer compare negative and branch if not overflow */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflcmno, \
   /* .name                 = */ "iflcmno", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::OverflowCompare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::iflcmnno, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    long compare negative and branch if overflow */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iflcmnno, \
   /* .name                 = */ "iflcmnno", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::OverflowCompare, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::iflcmno, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    long compare negative and branch if not overflow */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iuaddc, \
   /* .name                 = */ "iuaddc", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::SelectAdd, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Currently only valid for zEmulator.  Add two unsigned ints with carry */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ luaddc, \
   /* .name                 = */ "luaddc", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::SelectAdd, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Add two longs with carry */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iusubb, \
   /* .name                 = */ "iusubb", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::SelectSub, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Subtract two ints with borrow */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lusubb, \
   /* .name                 = */ "lusubb", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::SelectSub, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Subtract two longs with borrow */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ icmpset, \
   /* .name                 = */ "icmpset", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Address, TR::Int32, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    icmpset(pointer,c,r): compare *pointer with c, if it matches, replace with r.  Returns 0 on match, 1 otherwise */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lcmpset, \
   /* .name                 = */ "lcmpset", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Address, TR::Int64, TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    the operation is done atomically - return type is int for both [il]cmpset */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bztestnset, \
   /* .name                 = */ "bztestnset", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    bztestnset(pointer,c): atomically sets *pointer to c and returns the original value of *p (represents Test And Set on Z) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ibatomicor, \
   /* .name                 = */ "ibatomicor", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ isatomicor, \
   /* .name                 = */ "isatomicor", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iiatomicor, \
   /* .name                 = */ "iiatomicor", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ilatomicor, \
   /* .name                 = */ "ilatomicor", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare| ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ branch, \
   /* .name                 = */ "branch", \
   /* .properties1          = */ ILProp1::Branch | ILProp1::CompBranchOnly | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    generic branch --> DEPRECATED use TR::case instead */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ igoto, \
   /* .name                 = */ "igoto", \
   /* .properties1          = */ ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::JumpWithMultipleTargets, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect goto, branches to the address specified by a child */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fsqrt, \
   /* .name                 = */ "fsqrt", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    square root of float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dsqrt, \
   /* .name                 = */ "dsqrt", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    square root of double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfloor, \
   /* .name                 = */ "dfloor", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    floor of double, returning double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ffloor, \
   /* .name                 = */ "ffloor", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    floor of float, returning float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dceil, \
   /* .name                 = */ "dceil", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    ceil of double, returning double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fceil, \
   /* .name                 = */ "fceil", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    ceil of float, returning float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ imax, \
   /* .name                 = */ "imax", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Max, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    max of 2 or more integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iumax, \
   /* .name                 = */ "iumax", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Max, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    max of 2 or more unsigned integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lmax, \
   /* .name                 = */ "lmax", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Max, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    max of 2 or more longs */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lumax, \
   /* .name                 = */ "lumax", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Max, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    max of 2 or more unsigned longs */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fmax, \
   /* .name                 = */ "fmax", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Max, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    max of 2 or more floats */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dmax, \
   /* .name                 = */ "dmax", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Max, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    max of 2 or more doubles */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ imin, \
   /* .name                 = */ "imin", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Min, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    min of 2 or more integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iumin, \
   /* .name                 = */ "iumin", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Min, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    min of 2 or more unsigned integers */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lmin, \
   /* .name                 = */ "lmin", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Min, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    min of 2 or more longs */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lumin, \
   /* .name                 = */ "lumin", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Min, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    min of 2 or more unsigned longs */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ fmin, \
   /* .name                 = */ "fmin", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Min, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    min of 2 or more floats */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dmin, \
   /* .name                 = */ "dmin", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Min, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    min of 2 or more doubles */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ihbit, \
   /* .name                 = */ "ihbit", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ilbit, \
   /* .name                 = */ "ilbit", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ inolz, \
   /* .name                 = */ "inolz", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ inotz, \
   /* .name                 = */ "inotz", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ipopcnt, \
   /* .name                 = */ "ipopcnt", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lhbit, \
   /* .name                 = */ "lhbit", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ llbit, \
   /* .name                 = */ "llbit", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lnolz, \
   /* .name                 = */ "lnolz", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lnotz, \
   /* .name                 = */ "lnotz", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lpopcnt, \
   /* .name                 = */ "lpopcnt", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sbyteswap, \
   /* .name                 = */ "sbyteswap", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::ByteSwap, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    swap bytes in a short */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ibyteswap, \
   /* .name                 = */ "ibyteswap", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::ByteSwap, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    swap bytes in an integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lbyteswap, \
   /* .name                 = */ "lbyteswap", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::ByteSwap, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    swap bytes in a long */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bbitpermute, \
   /* .name                 = */ "bbitpermute", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Int8, TR::Address, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ sbitpermute, \
   /* .name                 = */ "sbitpermute", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Int16, TR::Address, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ibitpermute, \
   /* .name                 = */ "ibitpermute", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Int32, TR::Address, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lbitpermute, \
   /* .name                 = */ "lbitpermute", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ THREE_CHILD(TR::Int64, TR::Address, TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ Prefetch, \
   /* .name                 = */ "Prefetch", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Prefetch */ \
)
